# coding: utf-8

"""
    Kubernetes Queen API

    A simple API to interact with Kubernetes clusters

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Provisioner(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'engine': 'str',
        'state': 'str',
        'parameters': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'engine': 'engine',
        'state': 'state',
        'parameters': 'parameters'
    }

    def __init__(self, id=None, name=None, engine=None, state=None, parameters=None):
        """
        Provisioner - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._engine = None
        self._state = None
        self._parameters = None

        if id is not None:
          self.id = id
        self.name = name
        self.engine = engine
        if state is not None:
          self.state = state
        if parameters is not None:
          self.parameters = parameters

    @property
    def id(self):
        """
        Gets the id of this Provisioner.

        :return: The id of this Provisioner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Provisioner.

        :param id: The id of this Provisioner.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Provisioner.

        :return: The name of this Provisioner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Provisioner.

        :param name: The name of this Provisioner.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def engine(self):
        """
        Gets the engine of this Provisioner.

        :return: The engine of this Provisioner.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """
        Sets the engine of this Provisioner.

        :param engine: The engine of this Provisioner.
        :type: str
        """
        if engine is None:
            raise ValueError("Invalid value for `engine`, must not be `None`")

        self._engine = engine

    @property
    def state(self):
        """
        Gets the state of this Provisioner.

        :return: The state of this Provisioner.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Provisioner.

        :param state: The state of this Provisioner.
        :type: str
        """
        allowed_values = ["OK", "Error", "Not Reachable"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def parameters(self):
        """
        Gets the parameters of this Provisioner.
        Engine-specific parameters

        :return: The parameters of this Provisioner.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this Provisioner.
        Engine-specific parameters

        :param parameters: The parameters of this Provisioner.
        :type: object
        """

        self._parameters = parameters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Provisioner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
