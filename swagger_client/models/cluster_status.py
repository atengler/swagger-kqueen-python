# coding: utf-8

"""
    Kubernetes Queen API

    A simple API to interact with Kubernetes clusters

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClusterStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addons': 'list[Addon]',
        'deployments': 'IoK8sApiAppsV1DeploymentList',
        'nodes': 'IoK8sApiCoreV1NodeList',
        'nodes_pods': 'list[NodePod]',
        'persistent_volume_claims': 'IoK8sApiCoreV1PersistentVolumeClaimList',
        'persistent_volumes': 'IoK8sApiCoreV1PersistentVolumeList',
        'pods': 'IoK8sApiCoreV1PodList',
        'replica_sets': 'IoK8sApiAppsV1ReplicaSetList',
        'services': 'IoK8sApiCoreV1ServiceList',
        'version': 'IoK8sApimachineryPkgVersionInfo'
    }

    attribute_map = {
        'addons': 'addons',
        'deployments': 'deployments',
        'nodes': 'nodes',
        'nodes_pods': 'nodes_pods',
        'persistent_volume_claims': 'persistent_volume_claims',
        'persistent_volumes': 'persistent_volumes',
        'pods': 'pods',
        'replica_sets': 'replica_sets',
        'services': 'services',
        'version': 'version'
    }

    def __init__(self, addons=None, deployments=None, nodes=None, nodes_pods=None, persistent_volume_claims=None, persistent_volumes=None, pods=None, replica_sets=None, services=None, version=None):
        """
        ClusterStatus - a model defined in Swagger
        """

        self._addons = None
        self._deployments = None
        self._nodes = None
        self._nodes_pods = None
        self._persistent_volume_claims = None
        self._persistent_volumes = None
        self._pods = None
        self._replica_sets = None
        self._services = None
        self._version = None

        if addons is not None:
          self.addons = addons
        if deployments is not None:
          self.deployments = deployments
        if nodes is not None:
          self.nodes = nodes
        if nodes_pods is not None:
          self.nodes_pods = nodes_pods
        if persistent_volume_claims is not None:
          self.persistent_volume_claims = persistent_volume_claims
        if persistent_volumes is not None:
          self.persistent_volumes = persistent_volumes
        if pods is not None:
          self.pods = pods
        if replica_sets is not None:
          self.replica_sets = replica_sets
        if services is not None:
          self.services = services
        if version is not None:
          self.version = version

    @property
    def addons(self):
        """
        Gets the addons of this ClusterStatus.

        :return: The addons of this ClusterStatus.
        :rtype: list[Addon]
        """
        return self._addons

    @addons.setter
    def addons(self, addons):
        """
        Sets the addons of this ClusterStatus.

        :param addons: The addons of this ClusterStatus.
        :type: list[Addon]
        """

        self._addons = addons

    @property
    def deployments(self):
        """
        Gets the deployments of this ClusterStatus.

        :return: The deployments of this ClusterStatus.
        :rtype: IoK8sApiAppsV1DeploymentList
        """
        return self._deployments

    @deployments.setter
    def deployments(self, deployments):
        """
        Sets the deployments of this ClusterStatus.

        :param deployments: The deployments of this ClusterStatus.
        :type: IoK8sApiAppsV1DeploymentList
        """

        self._deployments = deployments

    @property
    def nodes(self):
        """
        Gets the nodes of this ClusterStatus.

        :return: The nodes of this ClusterStatus.
        :rtype: IoK8sApiCoreV1NodeList
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """
        Sets the nodes of this ClusterStatus.

        :param nodes: The nodes of this ClusterStatus.
        :type: IoK8sApiCoreV1NodeList
        """

        self._nodes = nodes

    @property
    def nodes_pods(self):
        """
        Gets the nodes_pods of this ClusterStatus.

        :return: The nodes_pods of this ClusterStatus.
        :rtype: list[NodePod]
        """
        return self._nodes_pods

    @nodes_pods.setter
    def nodes_pods(self, nodes_pods):
        """
        Sets the nodes_pods of this ClusterStatus.

        :param nodes_pods: The nodes_pods of this ClusterStatus.
        :type: list[NodePod]
        """

        self._nodes_pods = nodes_pods

    @property
    def persistent_volume_claims(self):
        """
        Gets the persistent_volume_claims of this ClusterStatus.

        :return: The persistent_volume_claims of this ClusterStatus.
        :rtype: IoK8sApiCoreV1PersistentVolumeClaimList
        """
        return self._persistent_volume_claims

    @persistent_volume_claims.setter
    def persistent_volume_claims(self, persistent_volume_claims):
        """
        Sets the persistent_volume_claims of this ClusterStatus.

        :param persistent_volume_claims: The persistent_volume_claims of this ClusterStatus.
        :type: IoK8sApiCoreV1PersistentVolumeClaimList
        """

        self._persistent_volume_claims = persistent_volume_claims

    @property
    def persistent_volumes(self):
        """
        Gets the persistent_volumes of this ClusterStatus.

        :return: The persistent_volumes of this ClusterStatus.
        :rtype: IoK8sApiCoreV1PersistentVolumeList
        """
        return self._persistent_volumes

    @persistent_volumes.setter
    def persistent_volumes(self, persistent_volumes):
        """
        Sets the persistent_volumes of this ClusterStatus.

        :param persistent_volumes: The persistent_volumes of this ClusterStatus.
        :type: IoK8sApiCoreV1PersistentVolumeList
        """

        self._persistent_volumes = persistent_volumes

    @property
    def pods(self):
        """
        Gets the pods of this ClusterStatus.

        :return: The pods of this ClusterStatus.
        :rtype: IoK8sApiCoreV1PodList
        """
        return self._pods

    @pods.setter
    def pods(self, pods):
        """
        Sets the pods of this ClusterStatus.

        :param pods: The pods of this ClusterStatus.
        :type: IoK8sApiCoreV1PodList
        """

        self._pods = pods

    @property
    def replica_sets(self):
        """
        Gets the replica_sets of this ClusterStatus.

        :return: The replica_sets of this ClusterStatus.
        :rtype: IoK8sApiAppsV1ReplicaSetList
        """
        return self._replica_sets

    @replica_sets.setter
    def replica_sets(self, replica_sets):
        """
        Sets the replica_sets of this ClusterStatus.

        :param replica_sets: The replica_sets of this ClusterStatus.
        :type: IoK8sApiAppsV1ReplicaSetList
        """

        self._replica_sets = replica_sets

    @property
    def services(self):
        """
        Gets the services of this ClusterStatus.

        :return: The services of this ClusterStatus.
        :rtype: IoK8sApiCoreV1ServiceList
        """
        return self._services

    @services.setter
    def services(self, services):
        """
        Sets the services of this ClusterStatus.

        :param services: The services of this ClusterStatus.
        :type: IoK8sApiCoreV1ServiceList
        """

        self._services = services

    @property
    def version(self):
        """
        Gets the version of this ClusterStatus.

        :return: The version of this ClusterStatus.
        :rtype: IoK8sApimachineryPkgVersionInfo
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this ClusterStatus.

        :param version: The version of this ClusterStatus.
        :type: IoK8sApimachineryPkgVersionInfo
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClusterStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
